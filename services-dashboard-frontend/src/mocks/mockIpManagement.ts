import type { Subnet, NetworkDevice, IpReservation, OmadaController } from '../types/IpManagement';

// Mock Subnets
export const mockSubnets: Subnet[] = [
  {
    id: 1,
    network: '192.168.1.0/24',
    description: 'Primary network for servers and workstations',
    gateway: '192.168.1.1',
    vlanId: 1,
    dhcpStart: '192.168.1.100',
    dhcpEnd: '192.168.1.200',
    dnsServers: '["8.8.8.8", "1.1.1.1"]',
    isMonitored: true,
    createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 2,
    network: '192.168.50.0/24',
    description: 'Isolated network for IoT devices and smart home',
    gateway: '192.168.50.1',
    vlanId: 50,
    dhcpStart: '192.168.50.50',
    dhcpEnd: '192.168.50.200',
    dnsServers: '["192.168.1.1"]',
    isMonitored: true,
    createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 3,
    network: '10.0.0.0/24',
    description: 'Guest WiFi with internet access only',
    gateway: '10.0.0.1',
    vlanId: 100,
    dhcpStart: '10.0.0.50',
    dhcpEnd: '10.0.0.250',
    dnsServers: '["8.8.8.8", "1.1.1.1"]',
    isMonitored: false,
    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
  },
];

// Mock Network Devices
export const mockNetworkDevices: NetworkDevice[] = [
  {
    id: 1,
    subnetId: 1,
    ipAddress: '192.168.1.10',
    macAddress: '00:1B:44:11:3A:B7',
    hostname: 'webserver-01',
    deviceType: 'Server',
    vendor: 'Dell Inc.',
    status: 'Online',
    lastSeen: new Date(Date.now() - 5 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[22, 80, 443]',
    notes: 'Production web server',
    source: 'NetworkScan',
    isDhcpAssigned: false,
    isStaticIp: true,
    createdAt: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 5 * 60 * 1000).toISOString(),
  },
  {
    id: 2,
    subnetId: 1,
    ipAddress: '192.168.1.15',
    macAddress: '00:1B:44:11:3A:C2',
    hostname: 'dbserver-01',
    deviceType: 'Server',
    vendor: 'Dell Inc.',
    status: 'Online',
    lastSeen: new Date(Date.now() - 2 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 150 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[5432, 3306]',
    notes: 'PostgreSQL and MySQL servers',
    source: 'NetworkScan',
    isDhcpAssigned: false,
    isStaticIp: true,
    createdAt: new Date(Date.now() - 150 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 2 * 60 * 1000).toISOString(),
  },
  {
    id: 3,
    subnetId: 1,
    ipAddress: '192.168.1.20',
    macAddress: '00:0C:29:3E:1F:45',
    hostname: 'docker-host-01',
    deviceType: 'Server',
    vendor: 'VMware',
    status: 'Online',
    lastSeen: new Date(Date.now() - 1 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[2375, 2376, 22]',
    notes: 'Docker container host',
    source: 'NetworkScan',
    isDhcpAssigned: false,
    isStaticIp: true,
    createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 1 * 60 * 1000).toISOString(),
  },
  {
    id: 4,
    subnetId: 1,
    ipAddress: '192.168.1.50',
    macAddress: 'AC:DE:48:00:11:22',
    hostname: 'admin-pc',
    deviceType: 'Computer',
    vendor: 'Apple Inc.',
    status: 'Online',
    lastSeen: new Date(Date.now() - 30 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 200 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[22]',
    notes: 'Administrator MacBook Pro',
    source: 'NetworkScan',
    isDhcpAssigned: false,
    isStaticIp: true,
    createdAt: new Date(Date.now() - 200 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 30 * 1000).toISOString(),
  },
  {
    id: 5,
    subnetId: 1,
    ipAddress: '192.168.1.105',
    macAddress: '34:97:F6:3F:5D:88',
    hostname: 'laptop-windows-01',
    deviceType: 'Computer',
    vendor: 'Lenovo',
    status: 'Offline',
    lastSeen: new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 180 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[3389]',
    notes: 'Developer laptop',
    source: 'NetworkScan',
    isDhcpAssigned: true,
    isStaticIp: false,
    createdAt: new Date(Date.now() - 180 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 6,
    subnetId: 1,
    ipAddress: '192.168.1.110',
    macAddress: '5C:F9:DD:5A:72:11',
    hostname: 'iphone-john',
    deviceType: 'Phone',
    vendor: 'Apple Inc.',
    status: 'Online',
    lastSeen: new Date(Date.now() - 10 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[]',
    source: 'OmadaController',
    isDhcpAssigned: true,
    isStaticIp: false,
    createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 10 * 60 * 1000).toISOString(),
  },
  {
    id: 7,
    subnetId: 1,
    ipAddress: '192.168.1.150',
    macAddress: 'B8:27:EB:A3:42:11',
    hostname: 'raspberry-pi-monitor',
    deviceType: 'IoT',
    vendor: 'Raspberry Pi Foundation',
    status: 'Online',
    lastSeen: new Date(Date.now() - 15 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[22, 80]',
    notes: 'Home monitoring system',
    source: 'NetworkScan',
    isDhcpAssigned: false,
    isStaticIp: true,
    createdAt: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 15 * 60 * 1000).toISOString(),
  },
  {
    id: 8,
    subnetId: 1,
    ipAddress: '192.168.1.200',
    macAddress: '00:11:85:4F:9C:AA',
    hostname: 'hp-printer',
    deviceType: 'Printer',
    vendor: 'HP Inc.',
    status: 'Online',
    lastSeen: new Date(Date.now() - 5 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 300 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[9100, 515, 631]',
    notes: 'Office laser printer',
    source: 'NetworkScan',
    isDhcpAssigned: false,
    isStaticIp: true,
    createdAt: new Date(Date.now() - 300 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 5 * 60 * 1000).toISOString(),
  },
  {
    id: 9,
    subnetId: 2,
    ipAddress: '192.168.50.100',
    macAddress: 'DC:A6:32:1F:5E:CC',
    hostname: 'smart-tv-living-room',
    deviceType: 'IoT',
    vendor: 'Samsung Electronics',
    status: 'Online',
    lastSeen: new Date(Date.now() - 2 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 180 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[8001, 8002]',
    source: 'NetworkScan',
    isDhcpAssigned: true,
    isStaticIp: false,
    createdAt: new Date(Date.now() - 180 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 2 * 60 * 1000).toISOString(),
  },
  {
    id: 10,
    subnetId: 2,
    ipAddress: '192.168.50.105',
    macAddress: '44:07:0B:AA:55:22',
    hostname: 'alexa-echo-dot',
    deviceType: 'SmartHome',
    vendor: 'Amazon.com',
    status: 'Online',
    lastSeen: new Date(Date.now() - 1 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[]',
    source: 'NetworkScan',
    isDhcpAssigned: true,
    isStaticIp: false,
    createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 1 * 60 * 1000).toISOString(),
  },
  {
    id: 11,
    subnetId: 2,
    ipAddress: '192.168.50.110',
    macAddress: 'B4:F1:DA:2C:88:77',
    hostname: 'smart-thermostat',
    deviceType: 'SmartHome',
    vendor: 'Nest Labs',
    status: 'Online',
    lastSeen: new Date(Date.now() - 3 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 365 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[443]',
    notes: 'Living room thermostat',
    source: 'NetworkScan',
    isDhcpAssigned: true,
    isStaticIp: false,
    createdAt: new Date(Date.now() - 365 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 3 * 60 * 1000).toISOString(),
  },
  {
    id: 12,
    subnetId: 2,
    ipAddress: '192.168.50.115',
    macAddress: 'A0:20:A6:1D:44:99',
    hostname: 'philips-hue-bridge',
    deviceType: 'SmartHome',
    vendor: 'Philips',
    status: 'Online',
    lastSeen: new Date(Date.now() - 1 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 200 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[80, 443]',
    source: 'NetworkScan',
    isDhcpAssigned: false,
    isStaticIp: true,
    createdAt: new Date(Date.now() - 200 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 1 * 60 * 1000).toISOString(),
  },
  {
    id: 13,
    subnetId: 2,
    ipAddress: '192.168.50.120',
    macAddress: '00:17:88:2F:CC:11',
    hostname: 'security-camera-01',
    deviceType: 'Camera',
    vendor: 'Hikvision',
    status: 'Online',
    lastSeen: new Date(Date.now() - 30 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[80, 554]',
    notes: 'Front door camera',
    source: 'NetworkScan',
    isDhcpAssigned: false,
    isStaticIp: true,
    createdAt: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 30 * 1000).toISOString(),
  },
  {
    id: 14,
    subnetId: 2,
    ipAddress: '192.168.50.125',
    macAddress: '00:17:88:2F:CC:22',
    hostname: 'security-camera-02',
    deviceType: 'Camera',
    vendor: 'Hikvision',
    status: 'Online',
    lastSeen: new Date(Date.now() - 45 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[80, 554]',
    notes: 'Backyard camera',
    source: 'NetworkScan',
    isDhcpAssigned: false,
    isStaticIp: true,
    createdAt: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 45 * 1000).toISOString(),
  },
  {
    id: 15,
    subnetId: 2,
    ipAddress: '192.168.50.130',
    macAddress: 'F0:9F:C2:AA:BB:33',
    hostname: 'smart-doorbell',
    deviceType: 'SmartHome',
    vendor: 'Ring',
    status: 'Offline',
    lastSeen: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 150 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[443]',
    notes: 'Needs battery replacement',
    source: 'NetworkScan',
    isDhcpAssigned: true,
    isStaticIp: false,
    createdAt: new Date(Date.now() - 150 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 16,
    subnetId: 3,
    ipAddress: '10.0.0.100',
    macAddress: '2C:54:91:88:C9:E3',
    hostname: 'guest-iphone-01',
    deviceType: 'Phone',
    vendor: 'Apple Inc.',
    status: 'Online',
    lastSeen: new Date(Date.now() - 20 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[]',
    source: 'OmadaController',
    isDhcpAssigned: true,
    isStaticIp: false,
    createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 20 * 60 * 1000).toISOString(),
  },
  {
    id: 17,
    subnetId: 3,
    ipAddress: '10.0.0.105',
    macAddress: '88:53:95:11:AA:44',
    hostname: 'guest-android-01',
    deviceType: 'Phone',
    vendor: 'Samsung Electronics',
    status: 'Online',
    lastSeen: new Date(Date.now() - 15 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[]',
    source: 'OmadaController',
    isDhcpAssigned: true,
    isStaticIp: false,
    createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 15 * 60 * 1000).toISOString(),
  },
  {
    id: 18,
    subnetId: 3,
    ipAddress: '10.0.0.110',
    macAddress: 'AC:37:43:77:1F:BB',
    hostname: 'guest-laptop-01',
    deviceType: 'Computer',
    vendor: 'Dell Inc.',
    status: 'Offline',
    lastSeen: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[]',
    source: 'OmadaController',
    isDhcpAssigned: true,
    isStaticIp: false,
    createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 19,
    subnetId: 1,
    ipAddress: '192.168.1.25',
    macAddress: '52:54:00:12:34:56',
    hostname: 'backup-server',
    deviceType: 'Server',
    vendor: 'QEMU',
    status: 'Online',
    lastSeen: new Date(Date.now() - 10 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[22, 873]',
    notes: 'Rsync backup server',
    source: 'NetworkScan',
    isDhcpAssigned: false,
    isStaticIp: true,
    createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 10 * 60 * 1000).toISOString(),
  },
  {
    id: 20,
    subnetId: 1,
    ipAddress: '192.168.1.30',
    macAddress: '00:50:56:AA:BB:CC',
    hostname: 'nas-storage',
    deviceType: 'Storage',
    vendor: 'Synology',
    status: 'Online',
    lastSeen: new Date(Date.now() - 2 * 60 * 1000).toISOString(),
    firstSeen: new Date(Date.now() - 400 * 24 * 60 * 60 * 1000).toISOString(),
    openPorts: '[22, 80, 443, 5000, 5001]',
    notes: 'Main NAS for file storage',
    source: 'NetworkScan',
    isDhcpAssigned: false,
    isStaticIp: true,
    createdAt: new Date(Date.now() - 400 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 2 * 60 * 1000).toISOString(),
  },
];

// Mock IP Reservations
export const mockIpReservations: IpReservation[] = [
  {
    id: 1,
    subnetId: 1,
    ipAddress: '192.168.1.10',
    macAddress: '00:1B:44:11:3A:B7',
    description: 'Production web server - permanent reservation',
    purpose: 'Web Server',
    assignedTo: 'Infrastructure Team',
    isActive: true,
    createdAt: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 2,
    subnetId: 1,
    ipAddress: '192.168.1.15',
    macAddress: '00:1B:44:11:3A:C2',
    description: 'Database server - permanent reservation',
    purpose: 'Database Server',
    assignedTo: 'Infrastructure Team',
    isActive: true,
    createdAt: new Date(Date.now() - 150 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 3,
    subnetId: 1,
    ipAddress: '192.168.1.20',
    macAddress: '00:0C:29:3E:1F:45',
    description: 'Docker container host - permanent reservation',
    purpose: 'Container Host',
    assignedTo: 'DevOps Team',
    isActive: true,
    createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 4,
    subnetId: 1,
    ipAddress: '192.168.1.50',
    macAddress: 'AC:DE:48:00:11:22',
    description: 'Administrator workstation',
    purpose: 'Admin PC',
    assignedTo: 'John Admin',
    isActive: true,
    expiresAt: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 200 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 5,
    subnetId: 1,
    ipAddress: '192.168.1.200',
    macAddress: '00:11:85:4F:9C:AA',
    description: 'Office printer - permanent reservation',
    purpose: 'Printer',
    assignedTo: 'Office',
    isActive: true,
    createdAt: new Date(Date.now() - 300 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 150 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 6,
    subnetId: 2,
    ipAddress: '192.168.50.120',
    macAddress: '00:17:88:2F:CC:11',
    description: 'Front door security camera',
    purpose: 'Security Camera',
    assignedTo: 'Security System',
    isActive: true,
    createdAt: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 7,
    subnetId: 2,
    ipAddress: '192.168.50.125',
    macAddress: '00:17:88:2F:CC:22',
    description: 'Backyard security camera',
    purpose: 'Security Camera',
    assignedTo: 'Security System',
    isActive: true,
    createdAt: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 8,
    subnetId: 1,
    ipAddress: '192.168.1.30',
    macAddress: '00:50:56:AA:BB:CC',
    description: 'Synology NAS - permanent reservation',
    purpose: 'Network Storage',
    assignedTo: 'Infrastructure Team',
    isActive: true,
    createdAt: new Date(Date.now() - 400 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 200 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 9,
    subnetId: 2,
    ipAddress: '192.168.50.115',
    macAddress: 'A0:20:A6:1D:44:99',
    description: 'Smart lighting controller',
    purpose: 'Smart Home Hub',
    assignedTo: 'Home Automation',
    isActive: true,
    expiresAt: new Date(Date.now() + 180 * 24 * 60 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 200 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 50 * 24 * 60 * 60 * 1000).toISOString(),
  },
  {
    id: 10,
    subnetId: 1,
    ipAddress: '192.168.1.150',
    macAddress: 'B8:27:EB:A3:42:11',
    description: 'Home monitoring Raspberry Pi',
    purpose: 'Monitoring System',
    assignedTo: 'Automation',
    isActive: true,
    expiresAt: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),
  },
];

// Mock Omada Controllers
export const mockOmadaControllers: OmadaController[] = [
  {
    id: 1,
    name: 'Main Omada Controller',
    apiUrl: 'https://omada.example.com',
    username: 'admin',
    siteId: 'default',
    isEnabled: true,
    syncClients: true,
    syncDhcp: true,
    syncIntervalMinutes: 15,
    lastSyncTime: new Date(Date.now() - 15 * 60 * 1000).toISOString(),
    lastSyncSuccess: true,
    createdAt: new Date(Date.now() - 180 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 15 * 60 * 1000).toISOString(),
  },
  {
    id: 2,
    name: 'Branch Office Controller',
    apiUrl: 'https://omada-branch.example.com',
    username: 'admin',
    siteId: 'branch-01',
    isEnabled: false,
    syncClients: true,
    syncDhcp: false,
    syncIntervalMinutes: 30,
    lastSyncTime: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
    lastSyncSuccess: false,
    lastSyncError: 'Connection timeout - controller may be offline',
    createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
  },
];
