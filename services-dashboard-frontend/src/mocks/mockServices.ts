import type { HostedService } from '../types/Service';
import type { ServiceStatus } from '../types/ServiceStatus';

export const mockServices: HostedService[] = [
  {
    id: 1,
    name: 'Production API Gateway',
    description: 'Main API gateway handling all production traffic',
    port: 8080,
    status: 'healthy' as ServiceStatus,
    dockerImage: 'nginx:latest',
    healthCheckUrl: 'http://api.example.com/health',
    hostAddress: '192.168.1.100',
    isDockerContainer: true,
    serverId: 1,
    containerId: 'abc123def456',
    lastCheckTime: new Date(Date.now() - 2 * 60000).toISOString(),
    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60000).toISOString(),
    updatedAt: new Date(Date.now() - 1 * 60000).toISOString(),
    uptime: 2592000, // 30 days in seconds
  },
  {
    id: 2,
    name: 'User Authentication Service',
    description: 'Handles user authentication and authorization',
    port: 3000,
    status: 'healthy' as ServiceStatus,
    dockerImage: 'node:18-alpine',
    healthCheckUrl: 'http://auth.example.com/health',
    hostAddress: '192.168.1.101',
    isDockerContainer: true,
    serverId: 1,
    containerId: 'xyz789ghi012',
    lastCheckTime: new Date(Date.now() - 1 * 60000).toISOString(),
    createdAt: new Date(Date.now() - 45 * 24 * 60 * 60000).toISOString(),
    updatedAt: new Date(Date.now() - 30000).toISOString(),
    uptime: 3888000, // 45 days in seconds
  },
  {
    id: 3,
    name: 'PostgreSQL Database',
    description: 'Main production database',
    port: 5432,
    status: 'healthy' as ServiceStatus,
    dockerImage: 'postgres:16',
    healthCheckUrl: 'tcp://192.168.1.102:5432',
    hostAddress: '192.168.1.102',
    isDockerContainer: true,
    serverId: 2,
    containerId: 'db1234567890',
    lastCheckTime: new Date(Date.now() - 3 * 60000).toISOString(),
    createdAt: new Date(Date.now() - 60 * 24 * 60 * 60000).toISOString(),
    updatedAt: new Date(Date.now() - 2 * 60000).toISOString(),
    uptime: 5184000, // 60 days in seconds
  },
  {
    id: 4,
    name: 'Redis Cache',
    description: 'In-memory cache for session management',
    port: 6379,
    status: 'healthy' as ServiceStatus,
    dockerImage: 'redis:7-alpine',
    healthCheckUrl: 'tcp://192.168.1.103:6379',
    hostAddress: '192.168.1.103',
    isDockerContainer: true,
    serverId: 2,
    containerId: 'redis987654321',
    lastCheckTime: new Date(Date.now() - 1.5 * 60000).toISOString(),
    createdAt: new Date(Date.now() - 40 * 24 * 60 * 60000).toISOString(),
    updatedAt: new Date(Date.now() - 45000).toISOString(),
    uptime: 3456000, // 40 days in seconds
  },
  {
    id: 5,
    name: 'Analytics Service',
    description: 'Real-time analytics and reporting engine',
    port: 9000,
    status: 'degraded' as ServiceStatus,
    dockerImage: 'python:3.11-slim',
    healthCheckUrl: 'http://analytics.example.com/health',
    hostAddress: '192.168.1.104',
    isDockerContainer: true,
    serverId: 3,
    containerId: 'analytics123456',
    lastCheckTime: new Date(Date.now() - 4 * 60000).toISOString(),
    createdAt: new Date(Date.now() - 20 * 24 * 60 * 60000).toISOString(),
    updatedAt: new Date(Date.now() - 3 * 60000).toISOString(),
    uptime: 1728000, // 20 days in seconds
  },
  {
    id: 6,
    name: 'File Storage Service',
    description: 'Object storage for user uploads and media',
    port: 9090,
    status: 'healthy' as ServiceStatus,
    dockerImage: 'minio/minio:latest',
    healthCheckUrl: 'http://storage.example.com/minio/health/live',
    hostAddress: '192.168.1.105',
    isDockerContainer: true,
    serverId: 3,
    containerId: 'minio789012345',
    lastCheckTime: new Date(Date.now() - 2.5 * 60000).toISOString(),
    createdAt: new Date(Date.now() - 35 * 24 * 60 * 60000).toISOString(),
    updatedAt: new Date(Date.now() - 1.5 * 60000).toISOString(),
    uptime: 3024000, // 35 days in seconds
  },
  {
    id: 7,
    name: 'Monitoring Dashboard',
    description: 'Grafana monitoring and visualization',
    port: 3001,
    status: 'healthy' as ServiceStatus,
    dockerImage: 'grafana/grafana:latest',
    healthCheckUrl: 'http://monitoring.example.com/api/health',
    hostAddress: '192.168.1.106',
    isDockerContainer: true,
    serverId: 4,
    containerId: 'grafana345678',
    lastCheckTime: new Date(Date.now() - 1 * 60000).toISOString(),
    createdAt: new Date(Date.now() - 50 * 24 * 60 * 60000).toISOString(),
    updatedAt: new Date(Date.now() - 30000).toISOString(),
    uptime: 4320000, // 50 days in seconds
  },
  {
    id: 8,
    name: 'Message Queue',
    description: 'RabbitMQ message broker for async tasks',
    port: 5672,
    status: 'healthy' as ServiceStatus,
    dockerImage: 'rabbitmq:3-management',
    healthCheckUrl: 'http://rabbitmq.example.com:15672/api/health/checks/alarms',
    hostAddress: '192.168.1.107',
    isDockerContainer: true,
    serverId: 4,
    containerId: 'rabbitmq567890',
    lastCheckTime: new Date(Date.now() - 2 * 60000).toISOString(),
    createdAt: new Date(Date.now() - 55 * 24 * 60 * 60000).toISOString(),
    updatedAt: new Date(Date.now() - 1.5 * 60000).toISOString(),
    uptime: 4752000, // 55 days in seconds
  },
  {
    id: 9,
    name: 'Email Service',
    description: 'SMTP server for transactional emails',
    port: 587,
    status: 'unhealthy' as ServiceStatus,
    dockerImage: 'mailhog/mailhog:latest',
    healthCheckUrl: 'http://mail.example.com/health',
    hostAddress: '192.168.1.108',
    isDockerContainer: false,
    serverId: 5,
    lastCheckTime: new Date(Date.now() - 15 * 60000).toISOString(),
    createdAt: new Date(Date.now() - 25 * 24 * 60 * 60000).toISOString(),
    updatedAt: new Date(Date.now() - 10 * 60000).toISOString(),
    uptime: 0, // Currently down
  },
  {
    id: 10,
    name: 'Elasticsearch Cluster',
    description: 'Full-text search and log aggregation',
    port: 9200,
    status: 'healthy' as ServiceStatus,
    dockerImage: 'elasticsearch:8.11.0',
    healthCheckUrl: 'http://search.example.com:9200/_cluster/health',
    hostAddress: '192.168.1.109',
    isDockerContainer: true,
    serverId: 5,
    containerId: 'elastic123890',
    lastCheckTime: new Date(Date.now() - 3 * 60000).toISOString(),
    createdAt: new Date(Date.now() - 70 * 24 * 60 * 60000).toISOString(),
    updatedAt: new Date(Date.now() - 2 * 60000).toISOString(),
    uptime: 6048000, // 70 days in seconds
  },
  {
    id: 11,
    name: 'Backup Service',
    description: 'Automated backup and disaster recovery',
    port: 8000,
    status: 'healthy' as ServiceStatus,
    hostAddress: '192.168.1.110',
    isDockerContainer: false,
    serverId: 5,
    lastCheckTime: new Date(Date.now() - 5 * 60000).toISOString(),
    createdAt: new Date(Date.now() - 15 * 24 * 60 * 60000).toISOString(),
    updatedAt: new Date(Date.now() - 4 * 60000).toISOString(),
    uptime: 1296000, // 15 days in seconds
  },
  {
    id: 12,
    name: 'Load Balancer',
    description: 'Traefik reverse proxy and load balancer',
    port: 80,
    status: 'healthy' as ServiceStatus,
    dockerImage: 'traefik:v2.10',
    healthCheckUrl: 'http://traefik.example.com/ping',
    hostAddress: '192.168.1.111',
    isDockerContainer: true,
    serverId: 1,
    containerId: 'traefik901234',
    lastCheckTime: new Date(Date.now() - 1 * 60000).toISOString(),
    createdAt: new Date(Date.now() - 80 * 24 * 60 * 60000).toISOString(),
    updatedAt: new Date(Date.now() - 30000).toISOString(),
    uptime: 6912000, // 80 days in seconds
  },
];
