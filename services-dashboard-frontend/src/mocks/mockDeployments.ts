import type { Deployment } from '../types/Deployment';

export const mockDeployments: Deployment[] = [
  {
    id: 1,
    gitRepositoryId: 1,
    repositoryName: 'frontend-app',
    serverId: 1,
    serverName: 'Production Server 1',
    name: 'Frontend Production',
    type: 'DockerCompose',
    status: 'Running',
    branch: 'main',
    dockerComposeFile: 'docker-compose.prod.yml',
    environmentVariables: {
      NODE_ENV: 'production',
      API_URL: 'https://api.example.com',
      PORT: '3000',
    },
    portMappings: [
      { hostPort: 3000, containerPort: 3000, protocol: 'tcp' },
    ],
    volumeMappings: [
      { hostPath: '/opt/app/data', containerPath: '/app/data', mode: 'rw' },
    ],
    autoDeploy: true,
    deploymentPath: '/opt/deployments/frontend-app',
    lastDeployedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
    environments: [
      {
        id: 1,
        deploymentId: 1,
        name: 'Production',
        type: 'Production',
        environmentVariables: {
          NODE_ENV: 'production',
          API_URL: 'https://api.example.com',
        },
        portMappings: [{ hostPort: 3000, containerPort: 3000, protocol: 'tcp' }],
        branch: 'main',
        isActive: true,
        lastDeployedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
        createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
      },
    ],
    allocatedPorts: [
      {
        id: 1,
        serverId: 1,
        deploymentId: 1,
        port: 3000,
        serviceName: 'frontend',
        description: 'Frontend web server',
        isActive: true,
        allocatedAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
      },
    ],
  },
  {
    id: 2,
    gitRepositoryId: 2,
    repositoryName: 'backend-api',
    serverId: 1,
    serverName: 'Production Server 1',
    name: 'Backend API',
    type: 'Docker',
    status: 'Running',
    branch: 'main',
    dockerfile: 'Dockerfile',
    buildContext: '.',
    environmentVariables: {
      NODE_ENV: 'production',
      DATABASE_URL: 'postgresql://localhost:5432/production_db',
      REDIS_URL: 'redis://localhost:6379',
      PORT: '5000',
    },
    portMappings: [
      { hostPort: 5000, containerPort: 5000, protocol: 'tcp' },
    ],
    volumeMappings: [
      { hostPath: '/opt/app/uploads', containerPath: '/app/uploads', mode: 'rw' },
    ],
    autoDeploy: true,
    deploymentPath: '/opt/deployments/backend-api',
    lastDeployedAt: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 85 * 24 * 60 * 60 * 1000).toISOString(),
    environments: [
      {
        id: 2,
        deploymentId: 2,
        name: 'Production',
        type: 'Production',
        environmentVariables: {
          NODE_ENV: 'production',
          DATABASE_URL: 'postgresql://localhost:5432/production_db',
        },
        portMappings: [{ hostPort: 5000, containerPort: 5000, protocol: 'tcp' }],
        branch: 'main',
        isActive: true,
        lastDeployedAt: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),
        createdAt: new Date(Date.now() - 85 * 24 * 60 * 60 * 1000).toISOString(),
      },
      {
        id: 3,
        deploymentId: 2,
        name: 'Staging',
        type: 'Staging',
        environmentVariables: {
          NODE_ENV: 'staging',
          DATABASE_URL: 'postgresql://localhost:5432/staging_db',
        },
        portMappings: [{ hostPort: 5001, containerPort: 5000, protocol: 'tcp' }],
        branch: 'develop',
        isActive: true,
        lastDeployedAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
      },
    ],
    allocatedPorts: [
      {
        id: 2,
        serverId: 1,
        deploymentId: 2,
        port: 5000,
        serviceName: 'api',
        description: 'Backend API server',
        isActive: true,
        allocatedAt: new Date(Date.now() - 85 * 24 * 60 * 60 * 1000).toISOString(),
      },
    ],
  },
  {
    id: 3,
    gitRepositoryId: 3,
    repositoryName: 'analytics-service',
    serverId: 3,
    serverName: 'Message Queue Server',
    name: 'Analytics Microservice',
    type: 'DockerCompose',
    status: 'Running',
    branch: 'main',
    dockerComposeFile: 'docker-compose.yml',
    environmentVariables: {
      PYTHON_ENV: 'production',
      KAFKA_BROKER: 'kafka:9092',
      ELASTICSEARCH_HOST: 'elasticsearch:9200',
    },
    portMappings: [
      { hostPort: 8080, containerPort: 8080, protocol: 'tcp' },
    ],
    autoDeploy: false,
    deploymentPath: '/opt/deployments/analytics-service',
    lastDeployedAt: new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
    environments: [
      {
        id: 4,
        deploymentId: 3,
        name: 'Production',
        type: 'Production',
        portMappings: [{ hostPort: 8080, containerPort: 8080, protocol: 'tcp' }],
        branch: 'main',
        isActive: true,
        lastDeployedAt: new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString(),
        createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
      },
    ],
    allocatedPorts: [
      {
        id: 3,
        serverId: 3,
        deploymentId: 3,
        port: 8080,
        serviceName: 'analytics',
        description: 'Analytics service API',
        isActive: true,
        allocatedAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
      },
    ],
  },
  {
    id: 4,
    gitRepositoryId: 4,
    repositoryName: 'monitoring-dashboard',
    serverId: 4,
    serverName: 'Monitoring Server',
    name: 'Grafana Dashboard',
    type: 'DockerCompose',
    status: 'Running',
    branch: 'main',
    dockerComposeFile: 'docker-compose.monitoring.yml',
    environmentVariables: {
      GF_SECURITY_ADMIN_PASSWORD: '***hidden***',
      GF_SERVER_ROOT_URL: 'https://monitoring.example.com',
    },
    portMappings: [
      { hostPort: 3001, containerPort: 3000, protocol: 'tcp' },
    ],
    autoDeploy: false,
    deploymentPath: '/opt/deployments/monitoring-dashboard',
    lastDeployedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000).toISOString(),
    environments: [
      {
        id: 5,
        deploymentId: 4,
        name: 'Production',
        type: 'Production',
        portMappings: [{ hostPort: 3001, containerPort: 3000, protocol: 'tcp' }],
        branch: 'main',
        isActive: true,
        lastDeployedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
        createdAt: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000).toISOString(),
      },
    ],
    allocatedPorts: [
      {
        id: 4,
        serverId: 4,
        deploymentId: 4,
        port: 3001,
        serviceName: 'grafana',
        description: 'Grafana monitoring dashboard',
        isActive: true,
        allocatedAt: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000).toISOString(),
      },
    ],
  },
  {
    id: 5,
    gitRepositoryId: 5,
    repositoryName: 'mobile-backend',
    serverId: 2,
    serverName: 'Cache Server',
    name: 'Mobile App Backend',
    type: 'Docker',
    status: 'Deploying',
    branch: 'release/v2.0',
    dockerfile: 'Dockerfile.prod',
    buildContext: '.',
    environmentVariables: {
      NODE_ENV: 'production',
      REDIS_HOST: 'localhost',
      PUSH_NOTIFICATIONS_KEY: '***hidden***',
    },
    portMappings: [
      { hostPort: 4000, containerPort: 4000, protocol: 'tcp' },
    ],
    autoDeploy: true,
    deploymentPath: '/opt/deployments/mobile-backend',
    lastDeployedAt: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000).toISOString(),
    environments: [
      {
        id: 6,
        deploymentId: 5,
        name: 'Production',
        type: 'Production',
        portMappings: [{ hostPort: 4000, containerPort: 4000, protocol: 'tcp' }],
        branch: 'release/v2.0',
        isActive: true,
        lastDeployedAt: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),
        createdAt: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000).toISOString(),
      },
    ],
    allocatedPorts: [
      {
        id: 5,
        serverId: 2,
        deploymentId: 5,
        port: 4000,
        serviceName: 'mobile-api',
        description: 'Mobile app backend API',
        isActive: true,
        allocatedAt: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000).toISOString(),
      },
    ],
  },
  {
    id: 6,
    gitRepositoryId: 6,
    repositoryName: 'webhook-processor',
    serverId: 3,
    serverName: 'Message Queue Server',
    name: 'Webhook Processor',
    type: 'Script',
    status: 'Stopped',
    branch: 'main',
    environmentVariables: {
      PYTHON_ENV: 'production',
      QUEUE_NAME: 'webhooks',
    },
    autoDeploy: false,
    deploymentPath: '/opt/deployments/webhook-processor',
    lastDeployedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 75 * 24 * 60 * 60 * 1000).toISOString(),
    environments: [
      {
        id: 7,
        deploymentId: 6,
        name: 'Production',
        type: 'Production',
        branch: 'main',
        isActive: false,
        lastDeployedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(),
        createdAt: new Date(Date.now() - 75 * 24 * 60 * 60 * 1000).toISOString(),
      },
    ],
    allocatedPorts: [],
  },
  {
    id: 7,
    gitRepositoryId: 7,
    repositoryName: 'batch-processor',
    serverId: 2,
    serverName: 'Cache Server',
    name: 'Nightly Batch Jobs',
    type: 'Docker',
    status: 'Failed',
    branch: 'main',
    dockerfile: 'Dockerfile',
    buildContext: '.',
    environmentVariables: {
      JAVA_OPTS: '-Xmx2g -Xms1g',
      DATABASE_URL: 'jdbc:postgresql://localhost:5432/batch_db',
    },
    portMappings: [],
    autoDeploy: false,
    deploymentPath: '/opt/deployments/batch-processor',
    lastDeployedAt: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 100 * 24 * 60 * 60 * 1000).toISOString(),
    environments: [
      {
        id: 8,
        deploymentId: 7,
        name: 'Production',
        type: 'Production',
        branch: 'main',
        isActive: false,
        lastDeployedAt: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),
        createdAt: new Date(Date.now() - 100 * 24 * 60 * 60 * 1000).toISOString(),
      },
    ],
    allocatedPorts: [],
  },
  {
    id: 8,
    gitRepositoryId: 8,
    repositoryName: 'admin-portal',
    serverId: 1,
    serverName: 'Production Server 1',
    name: 'Admin Dashboard',
    type: 'DockerCompose',
    status: 'Running',
    branch: 'main',
    dockerComposeFile: 'docker-compose.prod.yml',
    environmentVariables: {
      REACT_APP_API_URL: 'https://api.example.com',
      REACT_APP_ENV: 'production',
    },
    portMappings: [
      { hostPort: 8000, containerPort: 80, protocol: 'tcp' },
    ],
    autoDeploy: true,
    deploymentPath: '/opt/deployments/admin-portal',
    lastDeployedAt: new Date(Date.now() - 30 * 60 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 55 * 24 * 60 * 60 * 1000).toISOString(),
    environments: [
      {
        id: 9,
        deploymentId: 8,
        name: 'Production',
        type: 'Production',
        portMappings: [{ hostPort: 8000, containerPort: 80, protocol: 'tcp' }],
        branch: 'main',
        isActive: true,
        lastDeployedAt: new Date(Date.now() - 30 * 60 * 60 * 1000).toISOString(),
        createdAt: new Date(Date.now() - 55 * 24 * 60 * 60 * 1000).toISOString(),
      },
      {
        id: 10,
        deploymentId: 8,
        name: 'Development',
        type: 'Development',
        portMappings: [{ hostPort: 8001, containerPort: 80, protocol: 'tcp' }],
        branch: 'develop',
        isActive: true,
        lastDeployedAt: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),
        createdAt: new Date(Date.now() - 40 * 24 * 60 * 60 * 1000).toISOString(),
      },
    ],
    allocatedPorts: [
      {
        id: 6,
        serverId: 1,
        deploymentId: 8,
        port: 8000,
        serviceName: 'admin',
        description: 'Admin portal web interface',
        isActive: true,
        allocatedAt: new Date(Date.now() - 55 * 24 * 60 * 60 * 1000).toISOString(),
      },
    ],
  },
];
