import type { ManagedServer, ServerHealthCheck, UpdateReport, ServerAlert } from '../types/ServerManagement';

// Helper function to generate health checks
const generateHealthChecks = (serverId: number, isHealthy: boolean, count: number = 5): ServerHealthCheck[] => {
  const checks: ServerHealthCheck[] = [];
  for (let i = 0; i < count; i++) {
    const hoursAgo = i * 6; // Every 6 hours
    checks.push({
      id: serverId * 100 + i,
      serverId,
      checkTime: new Date(Date.now() - hoursAgo * 60 * 60 * 1000).toISOString(),
      isHealthy: isHealthy || Math.random() > 0.2,
      cpuUsage: isHealthy ? 20 + Math.random() * 40 : 70 + Math.random() * 25,
      memoryUsage: isHealthy ? 30 + Math.random() * 40 : 75 + Math.random() * 20,
      diskUsage: isHealthy ? 40 + Math.random() * 30 : 80 + Math.random() * 15,
      loadAverage: isHealthy ? 0.5 + Math.random() * 2 : 4 + Math.random() * 3,
      runningProcesses: 100 + Math.floor(Math.random() * 150),
      errorMessage: isHealthy ? undefined : 'High resource usage detected',
    });
  }
  return checks.reverse(); // Most recent first
};

// Helper function to generate update reports
const generateUpdateReports = (serverId: number, hasUpdates: boolean): UpdateReport[] => {
  const reports: UpdateReport[] = [];
  const daysAgo = [0, 7, 14];

  daysAgo.forEach((days, index) => {
    const availableUpdates = hasUpdates && days === 0 ? 5 + Math.floor(Math.random() * 10) : Math.floor(Math.random() * 3);
    const securityUpdates = availableUpdates > 0 ? Math.floor(availableUpdates * 0.3) : 0;

    reports.push({
      id: serverId * 10 + index,
      serverId,
      scanTime: new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString(),
      availableUpdates,
      securityUpdates,
      packageDetails: availableUpdates > 0
        ? `${availableUpdates} packages available for update including ${securityUpdates} security updates`
        : 'System is up to date',
      status: availableUpdates > 0 ? 'Pending' : 'Completed',
      aiRecommendation: securityUpdates > 0
        ? 'Critical security updates available. Recommend updating within 24 hours.'
        : 'System is stable. Regular maintenance recommended.',
      aiConfidence: 0.85 + Math.random() * 0.1,
    });
  });

  return reports;
};

// Helper function to generate alerts
const generateAlerts = (serverId: number, hasActiveAlerts: boolean): ServerAlert[] => {
  if (!hasActiveAlerts) return [];

  const alerts: ServerAlert[] = [];
  const alertConfigs = [
    { type: 'HighCpuUsage' as const, severity: 'High' as const, message: 'CPU usage exceeded 80% threshold' },
    { type: 'HighMemoryUsage' as const, severity: 'Medium' as const, message: 'Memory usage at 75%' },
    { type: 'UpdatesAvailable' as const, severity: 'Medium' as const, message: '5 security updates available' },
    { type: 'HighDiskUsage' as const, severity: 'High' as const, message: 'Disk usage at 85%' },
  ];

  alertConfigs.slice(0, Math.floor(Math.random() * 3) + 1).forEach((config, index) => {
    alerts.push({
      id: serverId * 10 + index,
      serverId,
      createdAt: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000).toISOString(),
      type: config.type,
      severity: config.severity,
      message: config.message,
      details: `Detected on ${new Date().toLocaleDateString()} during routine monitoring`,
      isResolved: false,
    });
  });

  return alerts;
};

export const mockServers: ManagedServer[] = [
  {
    id: 1,
    name: 'Production Server 1',
    hostAddress: 'prod-1.example.com',
    sshPort: 22,
    username: 'admin',
    type: 'Server',
    status: 'Online',
    group: 'OnPremise',
    operatingSystem: 'Ubuntu 22.04.3 LTS',
    systemInfo: 'Intel Xeon E5-2680 v4, 64GB RAM, 2TB SSD',
    lastCheckTime: new Date(Date.now() - 5 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 180 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 5 * 60 * 1000).toISOString(),
    tags: 'production,web,database',
    parentServerId: null,
    parentServerName: null,
    childServerCount: 3,
    isDashboardServer: false,
    healthChecks: generateHealthChecks(1, true),
    updateReports: generateUpdateReports(1, false),
    alerts: [],
  },
  {
    id: 2,
    name: 'Cache Server',
    hostAddress: 'cache-1.example.com',
    sshPort: 22,
    username: 'admin',
    type: 'Server',
    status: 'Online',
    group: 'OnPremise',
    operatingSystem: 'Ubuntu 22.04.3 LTS',
    systemInfo: 'AMD EPYC 7542, 128GB RAM, 1TB NVMe',
    lastCheckTime: new Date(Date.now() - 3 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 150 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 3 * 60 * 1000).toISOString(),
    tags: 'cache,redis,mongodb',
    parentServerId: 1,
    parentServerName: 'Production Server 1',
    childServerCount: 0,
    isDashboardServer: false,
    healthChecks: generateHealthChecks(2, true),
    updateReports: generateUpdateReports(2, true),
    alerts: generateAlerts(2, true),
  },
  {
    id: 3,
    name: 'Message Queue Server',
    hostAddress: 'mq-1.example.com',
    sshPort: 22,
    username: 'mqadmin',
    type: 'VirtualMachine',
    status: 'Online',
    group: 'OnPremise',
    operatingSystem: 'Debian 11',
    systemInfo: 'Virtual Machine, 16GB RAM, 500GB SSD',
    lastCheckTime: new Date(Date.now() - 10 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 120 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 10 * 60 * 1000).toISOString(),
    tags: 'messaging,rabbitmq,elasticsearch',
    parentServerId: 1,
    parentServerName: 'Production Server 1',
    childServerCount: 0,
    isDashboardServer: false,
    healthChecks: generateHealthChecks(3, true),
    updateReports: generateUpdateReports(3, false),
    alerts: [],
  },
  {
    id: 4,
    name: 'Monitoring Server',
    hostAddress: 'monitor-1.example.com',
    sshPort: 22,
    username: 'monitor',
    type: 'Server',
    status: 'Online',
    group: 'OnPremise',
    operatingSystem: 'Ubuntu 22.04.3 LTS',
    systemInfo: 'Intel Core i7-12700K, 32GB RAM, 1TB NVMe',
    lastCheckTime: new Date(Date.now() - 2 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 2 * 60 * 1000).toISOString(),
    tags: 'monitoring,grafana,prometheus',
    parentServerId: null,
    parentServerName: null,
    childServerCount: 0,
    isDashboardServer: false,
    healthChecks: generateHealthChecks(4, true),
    updateReports: generateUpdateReports(4, false),
    alerts: [],
  },
  {
    id: 5,
    name: 'Load Balancer',
    hostAddress: 'lb-1.example.com',
    sshPort: 22,
    username: 'lbadmin',
    type: 'Server',
    status: 'Warning',
    group: 'OnPremise',
    operatingSystem: 'Ubuntu 22.04.3 LTS',
    systemInfo: 'Intel Xeon E-2288G, 64GB RAM, 500GB SSD',
    lastCheckTime: new Date(Date.now() - 8 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 200 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 8 * 60 * 1000).toISOString(),
    tags: 'loadbalancer,traefik,gateway',
    parentServerId: 1,
    parentServerName: 'Production Server 1',
    childServerCount: 0,
    isDashboardServer: false,
    healthChecks: generateHealthChecks(5, false),
    updateReports: generateUpdateReports(5, true),
    alerts: generateAlerts(5, true),
  },
  {
    id: 6,
    name: 'Raspberry Pi 4 - Edge Node 1',
    hostAddress: '192.168.1.100',
    sshPort: 22,
    username: 'pi',
    type: 'RaspberryPi',
    status: 'Online',
    group: 'OnPremise',
    operatingSystem: 'Raspberry Pi OS (64-bit)',
    systemInfo: 'Raspberry Pi 4 Model B, 8GB RAM, 256GB SD Card',
    lastCheckTime: new Date(Date.now() - 15 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 15 * 60 * 1000).toISOString(),
    tags: 'iot,edge,sensors',
    parentServerId: null,
    parentServerName: null,
    childServerCount: 0,
    isDashboardServer: false,
    healthChecks: generateHealthChecks(6, true),
    updateReports: generateUpdateReports(6, false),
    alerts: [],
  },
  {
    id: 7,
    name: 'Raspberry Pi 4 - Edge Node 2',
    hostAddress: '192.168.1.101',
    sshPort: 22,
    username: 'pi',
    type: 'RaspberryPi',
    status: 'Online',
    group: 'OnPremise',
    operatingSystem: 'Raspberry Pi OS (64-bit)',
    systemInfo: 'Raspberry Pi 4 Model B, 4GB RAM, 128GB SD Card',
    lastCheckTime: new Date(Date.now() - 20 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 20 * 60 * 1000).toISOString(),
    tags: 'iot,edge,sensors',
    parentServerId: null,
    parentServerName: null,
    childServerCount: 0,
    isDashboardServer: false,
    healthChecks: generateHealthChecks(7, true),
    updateReports: generateUpdateReports(7, false),
    alerts: [],
  },
  {
    id: 8,
    name: 'Remote Backup Server',
    hostAddress: 'backup.remote.com',
    sshPort: 2222,
    username: 'backup',
    type: 'Server',
    status: 'Online',
    group: 'Remote',
    operatingSystem: 'CentOS 8 Stream',
    systemInfo: 'Dual Xeon E5-2670, 96GB RAM, 16TB HDD RAID',
    lastCheckTime: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 240 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
    tags: 'backup,disaster-recovery,remote',
    parentServerId: null,
    parentServerName: null,
    childServerCount: 0,
    isDashboardServer: false,
    healthChecks: generateHealthChecks(8, true),
    updateReports: generateUpdateReports(8, false),
    alerts: [],
  },
  {
    id: 9,
    name: 'Development VM',
    hostAddress: 'dev-vm-1.local',
    sshPort: 22,
    username: 'developer',
    type: 'VirtualMachine',
    status: 'Online',
    group: 'OnPremise',
    operatingSystem: 'Ubuntu 23.04',
    systemInfo: 'Virtual Machine, 8GB RAM, 200GB SSD',
    lastCheckTime: new Date(Date.now() - 45 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 45 * 60 * 1000).toISOString(),
    tags: 'development,testing',
    parentServerId: null,
    parentServerName: null,
    childServerCount: 0,
    isDashboardServer: false,
    healthChecks: generateHealthChecks(9, true),
    updateReports: generateUpdateReports(9, true),
    alerts: [],
  },
  {
    id: 10,
    name: 'Staging Server',
    hostAddress: 'staging.example.com',
    sshPort: 22,
    username: 'staging',
    type: 'Server',
    status: 'Maintenance',
    group: 'OnPremise',
    operatingSystem: 'Ubuntu 22.04.3 LTS',
    systemInfo: 'Intel Xeon Silver 4214, 32GB RAM, 1TB SSD',
    lastCheckTime: new Date(Date.now() - 60 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 100 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 60 * 60 * 1000).toISOString(),
    tags: 'staging,pre-production',
    parentServerId: null,
    parentServerName: null,
    childServerCount: 0,
    isDashboardServer: false,
    healthChecks: generateHealthChecks(10, true),
    updateReports: generateUpdateReports(10, false),
    alerts: [],
  },
  {
    id: 11,
    name: 'Legacy Database Server',
    hostAddress: '192.168.10.50',
    sshPort: 22,
    username: 'dbadmin',
    type: 'Server',
    status: 'Critical',
    group: 'OnPremise',
    operatingSystem: 'Ubuntu 18.04.6 LTS',
    systemInfo: 'Intel Xeon E5-2650 v2, 32GB RAM, 4TB HDD RAID',
    lastCheckTime: new Date(Date.now() - 120 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 300 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 120 * 60 * 1000).toISOString(),
    tags: 'legacy,database,deprecated',
    parentServerId: null,
    parentServerName: null,
    childServerCount: 0,
    isDashboardServer: false,
    healthChecks: generateHealthChecks(11, false),
    updateReports: generateUpdateReports(11, true),
    alerts: [
      {
        id: 110,
        serverId: 11,
        createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
        type: 'HighDiskUsage',
        severity: 'Critical',
        message: 'Disk usage exceeded 95% threshold',
        details: 'Root partition at 96% capacity. Immediate action required.',
        isResolved: false,
      },
      {
        id: 111,
        serverId: 11,
        createdAt: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),
        type: 'UpdatesAvailable',
        severity: 'High',
        message: '23 security updates available',
        details: 'OS version is outdated. Multiple critical security patches pending.',
        isResolved: false,
      },
    ],
  },
  {
    id: 12,
    name: 'Remote API Gateway',
    hostAddress: 'api.remote.example.com',
    sshPort: 22,
    username: 'apigateway',
    type: 'VirtualMachine',
    status: 'Offline',
    group: 'Remote',
    operatingSystem: 'Unknown',
    systemInfo: 'Connection failed',
    lastCheckTime: new Date(Date.now() - 180 * 60 * 1000).toISOString(),
    createdAt: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 180 * 60 * 1000).toISOString(),
    tags: 'remote,api,gateway',
    parentServerId: null,
    parentServerName: null,
    childServerCount: 0,
    isDashboardServer: false,
    healthChecks: [
      {
        id: 1200,
        serverId: 12,
        checkTime: new Date(Date.now() - 180 * 60 * 1000).toISOString(),
        isHealthy: false,
        errorMessage: 'Connection timeout: Unable to establish SSH connection',
      },
    ],
    updateReports: [],
    alerts: [
      {
        id: 120,
        serverId: 12,
        createdAt: new Date(Date.now() - 180 * 60 * 1000).toISOString(),
        type: 'ConnectionLost',
        severity: 'Critical',
        message: 'Server connection lost',
        details: 'Unable to establish SSH connection. Server may be offline or network issue.',
        isResolved: false,
      },
    ],
  },
];
