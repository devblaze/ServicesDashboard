name: CI Pipeline - Build and Basic Tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  backend-build:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ServicesDashboard
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: servicesdashboard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build backend
        run: dotnet build --configuration Release --no-restore

      - name: Check if backend can start (with database)
        run: |
          # Set configuration with proper PostgreSQL connection string
          export ASPNETCORE_ENVIRONMENT=Development
          export ConnectionStrings__DefaultConnection="Host=localhost;Port=5432;Database=servicesdashboard_test;Username=testuser;Password=testpassword"
          
          # Try to start the application
          timeout 30s dotnet run --no-build --configuration Release --urls="http://localhost:5000" &
          APP_PID=$!
          
          # Wait for startup and test basic functionality
          echo "Waiting for application to start..."
          for i in {1..15}; do
            if curl -f http://localhost:5000/api/Services > /dev/null 2>&1; then
              echo "✅ Backend application started successfully and API is responding"
              kill $APP_PID
              exit 0
            fi
            sleep 2
          done
          
          # If we get here, the app didn't respond in time
          echo "❌ Backend application failed to respond within timeout"
          kill $APP_PID || true
          exit 1

  frontend-build:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./services-dashboard-frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './services-dashboard-frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Build frontend
        run: npm run build

      - name: Check build artifacts
        run: |
          if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
            echo "✅ Frontend build completed successfully"
            echo "Build artifacts:"
            ls -la dist/
          else
            echo "❌ Frontend build failed - no dist folder or empty"
            exit 1
          fi

      - name: Test frontend build can be served
        run: |
          # Install a simple HTTP server
          npm install -g http-server
          
          # Start the server in background
          cd dist
          http-server -p 3000 &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 5
          
          # Test if the server responds
          if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "✅ Frontend can be served successfully"
            kill $SERVER_PID
            exit 0
          else
            echo "❌ Frontend server failed to respond"
            kill $SERVER_PID || true
            exit 1
          fi

  integration-check:
    name: Integration Check
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: servicesdashboard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './services-dashboard-frontend/package-lock.json'

      - name: Build backend
        working-directory: ./ServicesDashboard
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Build frontend
        working-directory: ./services-dashboard-frontend
        run: |
          npm ci
          npm run build

      - name: Start backend with database
        working-directory: ./ServicesDashboard
        run: |
          export ASPNETCORE_ENVIRONMENT=Development
          export ConnectionStrings__DefaultConnection="Host=localhost;Port=5432;Database=servicesdashboard_test;Username=testuser;Password=testpassword"
          
          # Start backend in background
          dotnet run --no-build --configuration Release --urls="http://localhost:5000" &
          BACKEND_PID=$!
          echo $BACKEND_PID > backend.pid
          
          # Wait for backend to start
          echo "Waiting for backend to start..."
          for i in {1..30}; do
            if curl -f http://localhost:5000/api/Services > /dev/null 2>&1; then
              echo "✅ Backend started and responding to API calls"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Backend failed to start within timeout"
              kill $BACKEND_PID || true
              exit 1
            fi
            sleep 2
          done

      - name: Test API endpoints
        run: |
          # Test basic API endpoints
          echo "Testing Services API..."
          if curl -f http://localhost:5000/api/Services; then
            echo "✅ Services API working"
          else
            echo "❌ Services API failed"
            exit 1
          fi
          
          echo "Testing Settings API..."
          if curl -f http://localhost:5000/api/Settings/ollama; then
            echo "✅ Settings API working"
          else
            echo "❌ Settings API failed"
            exit 1
          fi
          
          echo "Testing NetworkDiscovery API..."
          if curl -f http://localhost:5000/api/NetworkDiscovery/common-ports; then
            echo "✅ NetworkDiscovery API working"
          else
            echo "❌ NetworkDiscovery API failed"
            exit 1
          fi
          
          echo "✅ All API endpoints responding correctly"

      - name: Serve frontend and test integration
        working-directory: ./services-dashboard-frontend
        run: |
          # Install http-server
          npm install -g http-server
          
          # Start frontend server
          cd dist
          http-server -p 3000 &
          FRONTEND_PID=$!
          
          # Wait for frontend to start
          sleep 5
          
          # Test if frontend loads
          if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "✅ Frontend and backend integration test passed"
          else
            echo "❌ Frontend integration test failed"
            exit 1
          fi
          
          # Cleanup
          kill $FRONTEND_PID || true

      - name: Cleanup
        if: always()
        run: |
          # Kill backend if still running
          if [ -f "./ServicesDashboard/backend.pid" ]; then
            BACKEND_PID=$(cat "./ServicesDashboard/backend.pid")
            kill $BACKEND_PID || true
            rm "./ServicesDashboard/backend.pid"
          fi

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build, integration-check]
    if: always()
    steps:
      - name: Pipeline Summary
        run: |
          echo "## 📋 Pipeline Summary"
          echo "| Component | Status |"
          echo "|-----------|---------|"
          echo "| Backend Build | ${{ needs.backend-build.result == 'success' && '✅ Pass' || '❌ Fail' }} |"
          echo "| Frontend Build | ${{ needs.frontend-build.result == 'success' && '✅ Pass' || '❌ Fail' }} |"
          echo "| Integration Check | ${{ needs.integration-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |"
          
          if [[ "${{ needs.backend-build.result }}" == "success" && "${{ needs.frontend-build.result }}" == "success" && "${{ needs.integration-check.result }}" == "success" ]]; then
            echo ""
            echo "🎉 **All checks passed!** The application is ready for deployment."
            exit 0
          else
            echo ""
            echo "⚠️ **Some checks failed.** Please review the logs above."
            exit 1
          fi